Лабораторная работа №4, 2 задание.

Условие:
Создать базовый класс «Точка на плоскости». Элементы класса: поля,
задающие координаты точки (статус доступа protected); конструктор для
инициализации полей; функция для печати значений полей. Создать
производный класс «Точка в трехмерном пространстве». Элементы класса:
дополнительное поле, задающее дополнительную координату; конструктор для
инициализации полей; переопределенная функция для печати значений полей
(внутри переопределенной функции в первую очередь должна вызываться
функция из базового класса). Создать по одному объекту каждого из классов.
Показать вызов созданных функций. При переопределении функций
обеспечить динамический полиморфизм, показать его особенности в
программе.

Алгоритм выполнения:

1. Включить заголовочный файл `<iostream>` для работы со стандартными потоками ввода/вывода.
2. Включить заголовочный файл `<windows.h>` для использования функций работы с Windows API.
3. Включить заголовочный файл `<locale.h>` для установки локали.
4. Использовать пространство имен `std`.
5. Определить класс `Point2D`, который содержит защищенные элементы данных `x` и `y`, конструктор `Point2D()`, виртуальную функцию `print()`.
6. В конструкторе `Point2D()` задать значения элементов данных `x` и `y` по умолчанию.
7. В виртуальной функции `print()` вывести значения элементов данных `x` и `y` на экран.
8. Определить класс `Point3D`, который наследуется от класса `Point2D` и содержит приватный элемент данных `z`, конструктор `Point3D()`, переопределенную функцию `print()`.
9. В конструкторе `Point3D()` задать значения элементов данных `x`, `y` и `z` по умолчанию с помощью конструктора базового класса `Point2D`.
10. В переопределенной функции `print()` вызвать функцию `print()` из базового класса `Point2D` с помощью оператора `::`, затем вывести значение элемента данных `z` на экран.
11. В функции `main()` установить кодировку консоли, установить локаль для корректного отображения русских символов.
12. Создать объекты `p2d` и `p3d` классов `Point2D` и `Point3D` соответственно с заданными значениями координат.
13. Создать указатель `ptr` на объект базового класса `Point2D`.
14. Назначить указателю `ptr` адрес объекта `p2d`.
15. Вызвать метод `print()` через указатель `ptr` для объекта `p2d`. Это вызовет виртуальную функцию `print()` из базового класса `Point2D`.
16. Назначить указателю `ptrадрес объекта `p3d`.
17. Вызвать метод `print()` через указатель `ptr` для объекта `p3d`. Это вызовет переопределенную функцию `print()` из производного класса `Point3D` с использованием динамического полиморфизма.
18. Завершить функцию `main()` и возвратить ноль для указания успешного завершения программы.

Запись выполнения: https://drive.google.com/file/d/11-tkeDYY2PsU5JuZ7zH8Y9POl3kZY0BT/view?usp=sharing
